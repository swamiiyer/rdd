""" 
This script estimates the algorithmic complexity of the find_one_S_m 
(algorithm A), find_one_S_mu (algorithm B), and find_one_S_m_mu_hybrid 
(algorithm C) functions in rdd.py. The input data files, each storing n 
permutations of order m, are generated by the gen_data.py script and are fed 
to this program via STDIN. The results (average search time, average 
number of edges traversed, and the excess of distinguishability over 
ideal radius) are saved in the specified file.
"""

import math, rdd, sys, time

def main(args):
    """
    Entry point.
    """

    if len(args) != 1:
        print "Usage: python complexity.py <outfile>"
        sys.exit(1)
    outfile = args[0]
    files = sys.stdin.readlines()
    fh = open(outfile , "w")
    fh.write("m tA tB tC EA EB EC excess\n")
    for file in files:
        file = file.strip()
        print "Processing file %s..." %(file)
        samples = []
        for line in open(file, "r").readlines():
            samples.append(map(int, line.strip().split()))
        m = len(samples[0])
        n = len(samples)
        v = rdd.id(m)
        time_m, time_mu, time_m_mu_hybrid = 0.0, 0.0, 0.0
        edges_m, edges_mu, edges_m_mu_hybrid = 0.0, 0.0, 0.0
 	excess = 0.0     
        for u in samples:
            mu = rdd.composition(m, u)
            start = time.clock()
            edges, radius, center = rdd.find_one_S_m(m, mu, u, v)
            time_m += time.clock() - start
            edges_m += edges
            dist = rdd.dist(u, v)
            delta = radius - 2 * math.floor((dist / 2 + 1) / 2.0)
            excess += 1 if delta > 0 else 0
            start = time.clock()
            edges, radius, center = rdd.find_one_S_mu(m, mu, u, v)
            time_mu += time.clock() - start
            edges_mu += edges
            start = time.clock()
            edges, radius, center = rdd.find_one_S_m_mu_hybrid(m, mu, u, v)
            time_m_mu_hybrid += time.clock() - start
            edges_m_mu_hybrid += edges
        s = "%d %f %f %f %f %f %f %f" \
            %(m, time_m / n * 1e6, time_mu / n * 1e6, 
              time_m_mu_hybrid / n * 1e6, edges_m / n, edges_mu / n, 
              edges_m_mu_hybrid / n, excess / n)
        fh.write("%s\n" %(s))
    fh.close()
        
if __name__ == "__main__":
    main(sys.argv[1:])
